#!/bin/bash
set -e

source $HOME/.cargo/env

# Compile GStreamer dependencies first.
for repo in libwpe wpebackend-fdo; do
  pushd $repo
  if [[ $DEBUG == 'true' ]]; then
    if [[ $OPTIMIZATIONS == 'true' ]]; then
      meson build -D prefix=/usr -D buildtype=debugoptimized
    else
      meson build -D prefix=/usr -D buildtype=debug
    fi
  else
    meson build -D prefix=/usr -D buildtype=release -D b_lto=true
  fi

  # This is needed for other plugins to be built properly
  ninja -C build install
  # This is where we'll grab build artifacts from
  DESTDIR=/compiled-binaries ninja -C build install
  popd
done

pushd gstreamer
# TODO: Hack: `-D gupnp=disabled` is for libnice, because libgupnp-igd causes memory leaks
# msdk=enabled is for gst-plugings-bad to include msdk elements
# with_x11=no is for gstreamer-vaapi to exclude X11-related functionality (that would otherwise require extra dependencies)
MESON_OPTIONS="-Dvaapi=enabled -Dgpl=enabled -Dexamples=disabled -Dtests=disabled -Ddoc=disabled -Dqt5=disabled -Dpython=disabled -Dges=disabled -Ddevtools=disabled -Dintrospection=disabled -Dlibnice:gupnp=disabled -Dgst-plugins-bad:msdk=enabled -Dgstreamer-vaapi:with_x11=no"
if [[ $DEBUG == 'true' ]]; then
  if [[ $OPTIMIZATIONS == 'true' ]]; then
    meson build -D prefix=/usr $MESON_OPTIONS -D buildtype=debugoptimized
  else
    meson build -D prefix=/usr $MESON_OPTIONS -D buildtype=debug
  fi
else
  meson build -D prefix=/usr $MESON_OPTIONS -D buildtype=release -D b_lto=true
fi
# This is needed for other plugins to be built properly
ninja -C build install
# This is where we'll grab build artifacts from
DESTDIR=/compiled-binaries ninja -C build install
popd

# Compile gst-plugins-rs
pushd gst-plugins-rs
CARGO_BUILD_TYPE="--release"
CARGO_OUT_DIR="release"
if [[ $DEBUG == 'true' ]]; then
    CARGO_BUILD_TYPE=""
    CARGO_OUT_DIR="debug"
fi
cargo build $CARGO_BUILD_TYPE --manifest-path video/videofx/Cargo.toml
cp target/$CARGO_OUT_DIR/libgst*.so /compiled-binaries/usr/lib/x86_64-linux-gnu/gstreamer-1.0/
rm -fr target
popd

# Compile WPEWebKit
pushd wpewebkit
mkdir build
pushd build
if [[ $WEBKIT_USE_SCCACHE == '1' ]]; then
    export SCCACHE_CONF=/sccache.toml
    export SCCACHE_SERVER_PORT=8888
    sccache --start-server
fi
WPE_CMAKE_OPTS="-DCMAKE_INSTALL_PREFIX=/usr \
  -DPORT=WPE \
  -DENABLE_ACCESSIBILITY=OFF \
  -DENABLE_WEBDRIVER=OFF \
  -DUSE_SOUP2=ON \
  -DENABLE_JOURNALD_LOG=OFF -GNinja"
if [[ $DEBUG == 'true' ]]; then
  if [[ $OPTIMIZATIONS == 'true' ]]; then
    # RelWithDebInfo is huge, hence just release, we're unlikely to actually debug it
    WPE_BUILD_TYPE=Release
  else
    WPE_BUILD_TYPE=Debug
  fi
else
  WPE_BUILD_TYPE=Release
fi

CC=clang CXX=clang++ cmake -DCMAKE_BUILD_TYPE=$WPE_BUILD_TYPE $WPE_CMAKE_OPTS ..
popd

if [[ $SCCACHE_CONF != '' ]]; then
  NINJA_OPTS="-j 45"
else
  # Relax CPU load, unified builds require a lot of RAM and can easily overload
  # the machine when using all cores.
  NCPU=$(nproc)
  NINJA_OPTS="-j $(($NCPU/2))"
fi

CC=clang CXX=clang++ ninja $NINJA_OPTS -C build install

# This is where we'll grab build artifacts from
DESTDIR=/compiled-binaries ninja -C build install

# It is too large for us to afford storing it unfortunately, ~16GiB as of writing this message
rm -rf build
popd

# Re-build GStreamer with WPE enabled
pushd gstreamer
meson build --reconfigure -Dgst-plugins-bad:wpe=enabled
ninja -C build install
# This is where we'll grab build artifacts from
DESTDIR=/compiled-binaries ninja -C build install
popd

# Build the GStreamer CEF plugin
pushd gstcefsrc
GST_CEF_CMAKE_OPTS="-DCMAKE_INSTALL_PREFIX=/usr/cef -GNinja"
if [[ $DEBUG == 'true' ]]; then
    if [[ $OPTIMIZATIONS == 'true' ]]; then
        # RelWithDebInfo doesn't seem supported.
        GST_CEF_BUILD_TYPE=Release
    else
        GST_CEF_BUILD_TYPE=Debug
    fi
else
    GST_CEF_BUILD_TYPE=Release
fi
mkdir build
pushd build
CC=clang CXX=clang++ cmake -DCMAKE_BUILD_TYPE=$GST_CEF_BUILD_TYPE $GST_CEF_CMAKE_OPTS ..
DESTDIR=/compiled-binaries ninja install
popd
rm -fr build
popd

gst-inspect-1.0
